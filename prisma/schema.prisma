// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or mysql/sqlite depending on your DB
  url      = env("DATABASE_URL")
}

// ----------------------------- Enums -----------------------------

enum PayoutStatus {
  pending
  paid
  failed
}

enum JobStatus {
  queued
  assigned
  en_route
  completed
  cancelled
}

enum SubscriptionStatus {
  active
  past_due
  canceled
}

enum AuditAction {
  refresh_code
  update_company
  create_job
  update_job_status
  payout_created
  payout_paid
}

// ----------------------------- Core -----------------------------

model Company {
  id              String            @id @default(cuid())
  name            String
  vatNumber       String?           @db.VarChar(64)
  vatPercent      Int               @default(15)
  billingEmail    String?           @db.VarChar(255)
  popiaConsent    Boolean           @default(false)

  // Relations
  partners        Partner[]
  drivers         Driver[]
  contracts       Contract[]
  referrals       Referral[]        // referrals pointing to this company
  jobs            Job[]
  subscriptions   Subscription[]
  payments        Payment[]
  audits          AuditLog[]
  advisorMessages AdvisorMessage[]  // ðŸ”¥ added to fix missing relation

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([name])
}

model Partner {
  id                 String       @id @default(cuid())
  companyId          String?
  company            Company?     @relation(fields: [companyId], references: [id])

  code               String?      @unique
  commissionRateBps  Int          @default(500)
  tier               Int          @default(1)

  referrals          Referral[]
  payouts            Payout[]
  audits             AuditLog[]

  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@index([companyId])
}

model Referral {
  id          String   @id @default(cuid())
  partnerId   String
  partner     Partner  @relation(fields: [partnerId], references: [id])

  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])

  createdAt   DateTime @default(now())

  @@index([partnerId])
  @@index([companyId])
}

model Payout {
  id           String       @id @default(cuid())
  partnerId    String
  partner      Partner      @relation(fields: [partnerId], references: [id])

  amountCents  Int
  status       PayoutStatus @default(pending)
  period       String

  createdAt    DateTime     @default(now())
  paidAt       DateTime?

  @@index([partnerId, status])
}

// ----------------------------- Logistics -----------------------------

model Driver {
  id        String        @id @default(cuid())
  email     String?       @unique
  companyId String?
  company   Company?      @relation(fields: [companyId], references: [id])
  userId    String?
  name      String?
  phone     String?
  status    String?
  lastLat   Float?
  lastLon   Float?
  lastUpdated DateTime?
  jobs      Job[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  ledgerEntries LedgerEntry[] @relation("DriverLedger")
}

model Job {
  id           String    @id @default(cuid())
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id])

  driverId     String?
  driver       Driver?   @relation(fields: [driverId], references: [id])

  status       JobStatus @default(queued)
  pickupLat    Float?
  pickupLon    Float?
  dropLat      Float?
  dropLon      Float?
  payload      Json?
  scheduledAt  DateTime?
  completedAt  DateTime?

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([companyId])
  @@index([driverId])
  @@index([status])
}

// ----------------------------- Contracts -----------------------------

model Contract {
  id           String   @id @default(cuid())
  companyId    String
  company      Company  @relation(fields: [companyId], references: [id])

  name         String
  terms        String
  startDate    DateTime
  endDate      DateTime?
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  version     Int       @default(1)
  federationId String?
  federation   Federation? @relation(fields: [federationId], references: [id])
  ledgerEntries LedgerEntry[]
  @@index([companyId, active])
}

// ----------------------------- Subscriptions & Payments -----------------------------

model Subscription {
  id           String             @id @default(cuid())
  companyId    String
  company      Company            @relation(fields: [companyId], references: [id])

  plan         String
  status       SubscriptionStatus @default(active)
  periodStart  DateTime
  periodEnd    DateTime
  nextBilling  DateTime?

  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@index([companyId, status])
}

model Payment {
  id           String    @id @default(cuid())
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id])

  provider     String
  reference    String    @unique
  amountCents  Int
  currency     String    @default("ZAR")
  status       String
  meta         Json?
  ledgerEntries LedgerEntry[] @relation("PaymentLedger")
  createdAt    DateTime  @default(now())

  @@index([companyId, provider])
}

// ----------------------------- Audit -----------------------------

model AuditLog {
  id          String      @id @default(cuid())
  companyId   String?
  company     Company?    @relation(fields: [companyId], references: [id])

  partnerId   String?
  partner     Partner?    @relation(fields: [partnerId], references: [id])

  actorUserId String?
  entityType  String?
  action      AuditAction
  payload     Json?

  createdAt   DateTime    @default(now())

  @@index([companyId])
  @@index([partnerId])
  @@index([action])
}

model Audit {
  id        String   @id @default(cuid())
  uid       String   @unique
  actorId   String?
  companyId String?
  type      String
  targetId  String?
  meta      Json
  createdAt DateTime @default(now())
}


// ----------------------------- Governance -----------------------------

model NationKPI {
  id          String   @id @default(cuid())
  name        String
  value       Float
  period      String

  createdAt   DateTime @default(now())

  @@index([name, period])
}

model Federation {
  id         String   @id @default(cuid())
  name       String
  meta       Json?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AdvisorMessage {
  id         String   @id @default(cuid())
  topic      String
  content    String
  severity   String?
  createdAt  DateTime @default(now())

  companyId  String?
  company    Company? @relation(fields: [companyId], references: [id])
}

// --- AI, trips, logs, insights ---

enum TripStatus { planned started paused completed canceled }
enum InsightSeverity { info warning critical }
enum InsightType { weather hos_delay fuel_stop route_change compliance }

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])
  name        String?
  role        String?    // driver, dispatcher, partner
  preferences Json?      // time format, units, notification prefs
  vehicle     Json?      // type, tank size, average consumption
  cycleMaxHrs Int?       // e.g., 70
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TripPlan {
  id            String    @id @default(cuid())
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])
  driverId      String?
  driver        Driver?   @relation(fields: [driverId], references: [id])
  jobId         String?   // optional linkage to a Job
  status        TripStatus @default(planned)
  currentCycleUsedHrs Int @default(0)
  currentLocation Json      // { lat, lon }
  pickupLocation  Json      // { lat, lon, name }
  dropoffLocation Json      // { lat, lon, name }
  routeSummary   Json?      // { distanceKm, durationMin, fuelStops[] }
  startsAt       DateTime?
  completedAt    DateTime?
  createdByUserId String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  legs          TripLeg[]
  insights      InsightEvent[]
  logs          ELDLog[]
}

model TripLeg {
  id        String   @id @default(cuid())
  tripId    String
  trip      TripPlan @relation(fields: [tripId], references: [id])
  sequence  Int
  start     Json     // { lat, lon, name }
  end       Json     // { lat, lon, name }
  distanceKm Float?
  durationMin Int?
  type      String?  // driving, rest, fuel, pickup, dropoff
  plannedAt DateTime?
  actualAt  DateTime?
}

model ELDLog {
  id          String   @id @default(cuid())
  tripId      String
  trip        TripPlan @relation(fields: [tripId], references: [id])
  driverId    String?
  driver      Driver?  @relation(fields: [driverId], references: [id])
  date        DateTime // day of log
  sheet       Json     // structured entries + grid coordinates
  pdfUrl      String?  // cached export
  createdAt   DateTime @default(now())
}

model DriverHours {
  id         String   @id @default(cuid())
  driverId   String
  driver     Driver   @relation(fields: [driverId], references: [id])
  period     String   // e.g., "2025-10-06"
  onDutyMin  Int      @default(0)
  drivingMin Int      @default(0)
  offDutyMin Int      @default(0)
  cycleMin   Int      @default(0) // cumulative for 8-day
  updatedAt  DateTime @updatedAt

  @@index([driverId, period])
}

model InsightEvent {
  id          String         @id @default(cuid())
  tripId      String?
  trip        TripPlan?      @relation(fields: [tripId], references: [id])
  companyId   String?
  company     Company?       @relation(fields: [companyId], references: [id])
  driverId    String?
  driver      Driver?        @relation(fields: [driverId], references: [id])
  type        InsightType
  severity    InsightSeverity @default(info)
  message     String
  data        Json?
  createdAt   DateTime @default(now())

  @@index([tripId])
  @@index([companyId])
  @@index([driverId])
}

model AISession {
  id          String   @id @default(cuid())
  userId      String
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])
  startedAt   DateTime @default(now())
  endedAt     DateTime?
  transcript  Json?    // messages with intents and actions
  actions     Json?    // executed actions ({ type, params, result })
}

model ELDLog {
  id           String   @id @default(cuid())
  tripId       String
  trip         TripPlan @relation(fields: [tripId], references: [id])
  driverId     String?
  driver       Driver?  @relation(fields: [driverId], references: [id])
  date         DateTime
  sheet        Json     // canonical data used by renderer
  pdfUrl       String?
  // Compliance metadata:
  driverLicense   String?
  vehiclePlate    String?
  vehicleId       String?
  odometerStartKm Int?
  odometerEndKm   Int?
  timeZone        String? @default("SAST")
  utcOffsetMin    Int?    @default(120)
  hosDrivingMin   Int?    @default(0)
  hosOnDutyMin    Int?    @default(0)
  hosCycleMin     Int?    @default(0)
  violations      Json?   // e.g., [{ code, message }]
  certifiedByDriver Boolean @default(false)
  certifiedByCarrier Boolean @default(false)
  // Tamper-evidence:
  contentHash     String?
  auditLogId      String?

  createdAt    DateTime @default(now())
}


model Payout {
  id           String        @id @default(cuid())
  partnerId    String
  partner      Partner       @relation(fields: [partnerId], references: [id])
  amountCents  Int
  status       PayoutStatus
  period       String
  createdAt    DateTime      @default(now())
  ledgerEntries LedgerEntry[] @relation("PayoutLedger")
}



// prisma/schema.prisma
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  roles         String[] @default([])
  refreshToken  String?
  verified      Boolean  @default(false)
  createdAt     DateTime @default(now())
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Nation {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique // e.g. "ZA", "NG"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  federations Federation[]
  advisors    Advisor[]
}

model Advisor {
  id          String   @id @default(cuid())
  name        String
  expertise   String?
  email       String?   @unique
  nationId    String?
  nation      Nation?   @relation(fields: [nationId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Federation {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  nationId    String?
  nation      Nation?   @relation(fields: [nationId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  contracts   Contract[]
}


model LedgerEntry {
  id        String   @id @default(cuid())
  uid       String   @unique
  type      String
  entityId  String
  companyId String?
  driverId  String?
  hash      String
  createdAt DateTime @default(now())

  contract  Contract? @relation("ContractLedger", fields: [entityId], references: [id])
  payment   Payment?  @relation("PaymentLedger", fields: [entityId], references: [id])
  payout    Payout?   @relation("PayoutLedger", fields: [entityId], references: [id])
  driver    Driver?  @relation("DriverLedger", fields: [entityId], references: [id])
}
